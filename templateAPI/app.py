# -*- coding: utf-8 -*-
"""PasKita.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HznFjHub_i_r0dmeewxV_8NALx2ylHgS
"""

from rembg import remove
import requests
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import cv2
import numpy as np
import os
import requests
import datetime
from flask import Flask, request
from flask import Flask, jsonify
from google.cloud import firestore
import firebase_admin
from firebase_admin import credentials, firestore, storage, initialize_app

app = Flask(__name__)

os.makedirs('original', exist_ok=True)
os.makedirs('masked', exist_ok=True)
os.makedirs('font', exist_ok=True)
os.makedirs('hasil', exist_ok=True)
os.makedirs('service_account', exist_ok=True)

service_key_url = "https://firebasestorage.googleapis.com/v0/b/paskita-12c10.appspot.com/o/KeyFile%2Fpaskita-12c10-firebase-adminsdk-7d2la-70d4120e87.json?alt=media&token=343083c4-d450-40ca-a960-ad74a0ebaeb6"
response = requests.get(service_key_url)
with open("service_account/service_account_key.json", "wb") as font_file:
    font_file.write(response.content)

cred = credentials.Certificate("service_account/service_account_key.json")

initialize_app(cred, {'storageBucket': 'paskita-12c10.appspot.com'}, name='PasKita')

# Initialize Firestore client
db = firestore.client(app=firebase_admin.get_app(name='PasKita'))

@app.route('/get', methods=['GET'])
def generate():

    collection_ref = db.collection('generate_uid')

    # Retrieve documents from the collection
    produks = collection_ref.get()

    for produk in produks:
        produk_data = produk.to_dict()

        # Extracting individual values from the 'produk_data' dictionary
        harga_produk = produk_data.get('harga_produk')
        url_foto_produk = produk_data.get('url_foto_produk')
        nama_produk = produk_data.get('nama_produk')
        user_uid = produk_data.get('user_uid')
        asal_daerah = produk_data.get('asal_daerah')
        kata_promosi = produk_data.get('kata_promosi')
        instagram = produk_data.get('instagram')
        whatsapp = produk_data.get('whatsapp')
        tiktok = produk_data.get('tiktok')

        print(url_foto_produk)

    img_url = url_foto_produk
    img_url = img_url.replace('%2F', '/')

    # Mendapatkan nama file dengan parameter
    img_name_with_params = img_url.split('/')[-1]

    # Memisahkan nama file dengan ekstensi dari parameter
    img_name = img_name_with_params.split('?')[0]

    # Memisahkan ekstensi file dan token
    img_extension = img_name.split('.')[-1]
    token = img_url.split('=')[-1]

    print("Nama File:", img_name)
    print("Ekstensi File:", img_extension)
    print("Token:", token)

    response = requests.get(url_foto_produk)
    with open('original/'+img_name, "wb") as file:
        file.write(response.content)
    output_path = 'masked/' + img_name
    print(output_path)

    with open(output_path, 'wb') as f :
        input = open('original/'+img_name, 'rb').read()
        subject = remove(input, alpha_matting=True, alpha_matting_foreground_threshold=50)
        f.write(subject)

    poppins_font_url = "https://firebasestorage.googleapis.com/v0/b/paskita-12c10.appspot.com/o/Font%2FPoppins-SemiBold.ttf?alt=media&token=97d94dac-b99a-4cc9-ab49-f45308ece1c9"
    response = requests.get(poppins_font_url)
    with open("font/Poppins-SemiBold.ttf", "wb") as font_file:
        font_file.write(response.content)

    redkits_font_url = "https://firebasestorage.googleapis.com/v0/b/paskita-12c10.appspot.com/o/Font%2FRedKits.ttf?alt=media&token=a26f3870-6aa0-46c7-8234-704f56799761"
    response = requests.get(redkits_font_url)
    with open("font/RedKits.ttf", "wb") as font_file:
        font_file.write(response.content)

    back_img = ['https://storage.googleapis.com/capstone-project-406403/template-produk/produk-1.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-2.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-3.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-4.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-5.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-6.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-7.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-8.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-9.png',
                'https://storage.googleapis.com/capstone-project-406403/template-produk/produk-10.png']

    total_images = len(back_img)
    success_count = 0

    for idx, img_url in enumerate(back_img):
        response = requests.get(img_url)
        if response.status_code == 200:
            back_img = Image.open(BytesIO(response.content))
            back_img = back_img.resize((1080, 1080)).convert('RGB')
            fore_img = Image.open(output_path)

            fore_img = fore_img.resize((840, 540))

            background_array = np.array(back_img)
            background_array = cv2.cvtColor(background_array, cv2.COLOR_BGR2RGB)

            # informasi Deteksi Warna

            hex_color_img = '#3D2B1F'
            hex_color_nama_makanan = '#CCCCFF'
            hex_color_harga= '#801818'
            hex_color_daerah= '#6082B6'
            hex_color_promosi= '#FFC40C'
            hex_color_instagram= '#645452'
            hex_color_tiktok= '#003399'
            hex_color_whatsapp= '#92000A'

            # Convert hexadecimal to BGR
            def hex_to_rgb_array(hex_color):
                return np.array([int(hex_color[i:i+2], 16) for i in (5, 3, 1)])

            color_img = np.array(hex_to_rgb_array(hex_color_img))
            color_nama_makanan = np.array(hex_to_rgb_array(hex_color_nama_makanan))
            color_harga = np.array(hex_to_rgb_array(hex_color_harga))
            color_daerah = np.array(hex_to_rgb_array(hex_color_daerah))
            color_promosi = np.array(hex_to_rgb_array(hex_color_promosi))
            color_instagram = np.array(hex_to_rgb_array(hex_color_instagram))
            color_tiktok = np.array(hex_to_rgb_array(hex_color_tiktok))
            color_whatsapp = np.array(hex_to_rgb_array(hex_color_whatsapp))

            # set gambar produk
            diff_img = np.sqrt(np.sum((background_array - color_img) ** 2, axis=2))
            min_indices_img = np.unravel_index(np.argmin(diff_img), diff_img.shape)

            x_offset_img = min_indices_img[1] - fore_img.width // 2
            y_offset_img = min_indices_img[0] - fore_img.height // 2

            back_img.paste(fore_img, (x_offset_img, y_offset_img), fore_img)

            # Calculate the dominant color in the background image
            def calculate_dominant_color(image):
                # Convert the image to grayscale
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
                # Calculate the mean of pixel values
                mean_value = np.mean(gray)
                if mean_value > 200:  # If predominantly white
                    return 'white'
                else:
                    return 'black'

            # Fungsi untuk menambahkan teks ke gambar
            def add_redKits(image, dominant_color, text, x, y, font_size):
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype("font/RedKits.ttf", font_size)
                if dominant_color == 'white':
                    draw.text((x, y), text, fill=(0, 0, 0), font=font)  # Set text to black
                else:
                    draw.text((x, y), text, fill=(255, 255, 255), font=font)  # Default: white text

            # Fungsi untuk menambahkan teks ke gambar
            def add_poppins_white(image, text, x, y, font_size):
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype("font/Poppins-SemiBold.ttf", font_size)
                draw.text((x, y), text, fill=(255, 255, 255), font=font)
                return draw.textlength(text, font=font)

            # Fungsi untuk menambahkan teks ke gambar
            def add_poppins_black(image, text, x, y, font_size):
                draw = ImageDraw.Draw(image)
                font = ImageFont.truetype("font/Poppins-SemiBold.ttf", font_size)
                draw.text((x, y), text, fill=(0, 0, 0), font=font)
                return draw.textlength(text, font=font)

            dominant_color = calculate_dominant_color(background_array)
            # set tulisan nama produk
            diff_nama_makanan = np.sqrt(np.sum((background_array - color_nama_makanan) ** 2, axis=2))
            min_indices_nama_makanan = np.unravel_index(np.argmin(diff_nama_makanan), diff_nama_makanan.shape)

            text_nama_makanan = nama_produk
            font_size_nama_makanan = 80

            x_offset_nama_makanan = min_indices_nama_makanan[1] - fore_img.width//3
            y_offset_nama_makanan = min_indices_nama_makanan[0] - font_size_nama_makanan//2

            add_redKits(back_img, dominant_color, text_nama_makanan, x_offset_nama_makanan, y_offset_nama_makanan, font_size_nama_makanan)

            # set tulisan harga produk
            diff_harga= np.sqrt(np.sum((background_array - color_harga) ** 2, axis=2))
            min_indices_harga = np.unravel_index(np.argmin(diff_harga), diff_harga.shape)

            text_harga = harga_produk
            font_size_harga = 30

            x_offset_harga = min_indices_harga[1] - 5
            y_offset_harga = min_indices_harga[0] - font_size_harga//2

            add_poppins_white(back_img, text_harga, x_offset_harga, y_offset_harga, font_size_harga)

            # set tulisan daerah produk
            diff_daerah = np.sqrt(np.sum((background_array - color_daerah) ** 2, axis=2))
            min_indices_daerah = np.unravel_index(np.argmin(diff_daerah), diff_daerah.shape)

            text_daerah = asal_daerah
            font_size_daerah= 80

            x_offset_daerah = min_indices_daerah[1] - 20
            y_offset_daerah = min_indices_daerah[0] - font_size_daerah //3

            add_redKits(back_img, dominant_color, text_daerah, x_offset_daerah, y_offset_daerah, font_size_daerah)

            # set tulisan kata-kata promosi
            diff_promosi = np.sqrt(np.sum((background_array - color_promosi) ** 2, axis=2))
            min_indices_promosi = np.unravel_index(np.argmin(diff_promosi), diff_promosi.shape)

            text_promosi = kata_promosi
            font_size_promosi= 60

            x_offset_promosi = min_indices_promosi[1] - font_size_promosi//4
            y_offset_promosi = min_indices_promosi[0] - font_size_promosi//2

            if len(text_promosi) > 20:
            # Pecah teks menjadi beberapa baris
                words = text_promosi.split()
                lines = []
                current_line = ""
                for word in words:
                    if len(current_line + word) <= 20:
                        current_line += word + " "
                    else:
                        lines.append(current_line)
                        current_line = word + " "
            if current_line:
                lines.append(current_line)

            # Gabungkan baris-baris menjadi teks dengan baris baru
            text_promosi = "\n".join(lines)
            add_redKits(back_img, dominant_color, "\n".join(lines), x_offset_promosi, y_offset_promosi, font_size_promosi)

            # set tulisan instagram
            diff_instagram= np.sqrt(np.sum((background_array - color_instagram) ** 2, axis=2))
            min_indices_instagram = np.unravel_index(np.argmin(diff_instagram), diff_instagram.shape)

            text_instagram = instagram
            font_size_instagram = 12

            x_offset_instagram = min_indices_instagram[1]-font_size_instagram//4
            y_offset_instagram = min_indices_instagram[0]-4

            add_poppins_black(back_img, text_instagram, x_offset_instagram, y_offset_instagram, font_size_instagram)

            # set tulisan tiktok
            diff_tiktok= np.sqrt(np.sum((background_array - color_tiktok) ** 2, axis=2))
            min_indices_tiktok = np.unravel_index(np.argmin(diff_tiktok), diff_tiktok.shape)

            text_tiktok = tiktok
            font_size_tiktok = 12

            x_offset_tiktok = min_indices_tiktok[1]-font_size_tiktok//4
            y_offset_tiktok = min_indices_tiktok[0]- 4

            add_poppins_black(back_img, text_tiktok, x_offset_tiktok, y_offset_tiktok, font_size_tiktok)

            # set tulisan whatsapp
            diff_whatsapp= np.sqrt(np.sum((background_array - color_whatsapp) ** 2, axis=2))
            min_indices_whatsapp = np.unravel_index(np.argmin(diff_whatsapp), diff_whatsapp.shape)

            text_whatsapp = whatsapp
            font_size_whatsapp = 12

            x_offset_whatsapp = min_indices_whatsapp[1]-font_size_whatsapp//4
            y_offset_whatsapp = min_indices_whatsapp[0]-4

            add_poppins_black(back_img, text_whatsapp, x_offset_whatsapp, y_offset_whatsapp, font_size_whatsapp)

            back_img.save(f'hasil/background_{idx + 1}_{user_uid}_{nama_produk}.jpg', format='JPEG')

            success_count += 1
        else:
            print(f"Failed to download image from URL {img_url}")

    success_percentage = (success_count / total_images) * 100
    print(f"Success rate: {success_percentage:.2f}%")

    bucket = storage.bucket(app=firebase_admin.get_app(name='PasKita'))

    for idx in range(total_images):
        file_name = f'hasil/background_{idx + 1}_{user_uid}_{nama_produk}.jpg'
        blob = bucket.blob(file_name)
        blob.upload_from_filename(file_name)

        # Dapatkan URL dengan token akses
        url = blob.generate_signed_url(
            version="v4",
            expiration=datetime.timedelta(minutes=2880),
        )

        # Simpan URL ke Firestore
        doc_ref = db.collection('hasil_generated').add({
            'user_id': user_uid,
            'image_url': url,
        })

        print(f"Uploaded {file_name} to Firebase Storage with URL: {url}")

    print("Uploaded all images to Firebase Storage and saved to Firestore.")
    return jsonify({'status': 'success'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
